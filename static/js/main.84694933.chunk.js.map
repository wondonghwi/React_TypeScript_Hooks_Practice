{"version":3,"sources":["Greetings.tsx","MyForm.tsx","ReducerHooks.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Greetings","name","mark","optional","onClick","defaultProps","MyForm","onSubmit","inputRef","useRef","useState","description","form","setForm","handleChange","e","target","value","preventDefault","current","focus","type","onChange","placeholder","ref","reducer","state","action","count","text","color","isGood","ReducerHooks","useReducer","dispatch","App","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84694933.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype GreetingsProps = {\r\n    name: string;\r\n    mark: string;\r\n    optional?: string,\r\n    onClick: (name: string) => void; // 아무것도 리턴하지 않는다는 함수를 의미\r\n};\r\n\r\nconst Greetings = ({name, mark, optional, onClick}: GreetingsProps) => {\r\n\r\n    const handleClick = () => onClick(name);\r\n\r\n    return (\r\n        <div>\r\n            Hello, {name} {mark}\r\n            {optional && <p>{optional}</p>}\r\n            <div>\r\n                <button onClick={handleClick}>Click Me</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nGreetings.defaultProps = {\r\n    mark: '!'\r\n};\r\n\r\nexport default Greetings;\r\n","import React, { useRef, useState } from 'react';\r\n\r\ntype MyFormProps = {\r\n    onSubmit: (form: { name: string; description: string }) => void;\r\n};\r\n\r\nconst MyForm = ({onSubmit}: MyFormProps) => {\r\n\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n    const [form, setForm] = useState({\r\n        name: '',\r\n        description: ''\r\n    });\r\n\r\n    const {name, description} = form;\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const {name, value} = e.target;\r\n        setForm({\r\n            ...form,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        onSubmit(form);\r\n        setForm({\r\n            name: '',\r\n            description: ''\r\n        });\r\n        //타입스크립트는 uerRef를 사용할때 null 체킹!\r\n        if (!inputRef.current) {\r\n            return;\r\n        }\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input name='name' type=\"text\" value={name} onChange={handleChange} placeholder='name' ref={inputRef}/>\r\n            <input name='description' type=\"text\" value={description} onChange={handleChange}\r\n                   placeholder='description'/>\r\n            <button type='submit'>등록(console)</button>\r\n            <div>\r\n                <b>{name}</b> <span>({description})</span>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default MyForm;\r\n","import React, { useReducer } from 'react';\r\n\r\ntype Color = 'red' | 'orange' | 'yellow';\r\n\r\ntype State = {\r\n    count: number,\r\n    text: string,\r\n    color: Color,\r\n    isGood: boolean;\r\n};\r\n\r\ntype Action =\r\n    | { type: 'SET_COUNT'; count: number }\r\n    | { type: 'SET_TEXT'; text: string; }\r\n    | { type: 'SET_COLOR'; color: Color; }\r\n    | { type: 'TOGGLE_GOOD'; }\r\n\r\nconst reducer = (state: State, action: Action): State => {\r\n    // 리듀서를 만들 땐 이렇게 파라미터로 받아오는 상태의 타입과 함수가 리턴하는 타입을 동일하게(State) 하는 것이 매우 중요.\r\n    switch (action.type) {\r\n        case \"SET_COUNT\":\r\n            return {\r\n                ...state,\r\n                count: action.count\r\n            };\r\n        case \"SET_TEXT\":\r\n            return {\r\n                ...state,\r\n                text: action.text\r\n            };\r\n        case \"SET_COLOR\":\r\n            return {\r\n                ...state,\r\n                color: action.color\r\n            };\r\n        case 'TOGGLE_GOOD':\r\n            return {\r\n                ...state,\r\n                isGood: !state.isGood\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst ReducerHooks = () => {\r\n\r\n    const [state, dispatch] = useReducer(reducer, {\r\n        count: 0,\r\n        text: 'hello',\r\n        color: 'red',\r\n        isGood: true\r\n    });\r\n\r\n    const setCount = () => dispatch({type: 'SET_COUNT', count: state.count + 1}); // count 를 넣지 않으면 에러발생\r\n    const setText = () => dispatch({type: 'SET_TEXT', text: 'bye'}); // text 를 넣지 않으면 에러 발생\r\n    const setColor = () => dispatch({type: 'SET_COLOR', color: 'orange'}); // color 를 넣지 않으면 에러 발생\r\n    const toggleGood = () => dispatch({type: 'TOGGLE_GOOD'});\r\n\r\n    return (\r\n        <div>\r\n            <p>\r\n                <code>count: </code> {state.count}\r\n            </p>\r\n            <p>\r\n                <code>text: </code> {state.text}\r\n            </p>\r\n            <p>\r\n                <code>color: </code> {state.color}\r\n            </p>\r\n            <p>\r\n                <code>isGood: </code> {state.isGood ? 'true' : 'false'}\r\n            </p>\r\n            <div>\r\n                <button onClick={setCount}>SET_COUNT</button>\r\n                <button onClick={setText}>SET_TEXT</button>\r\n                <button onClick={setColor}>SET_COLOR</button>\r\n                <button onClick={toggleGood}>TOGGLE_GOOD</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ReducerHooks;\r\n","import React from 'react';\nimport Greetings from './Greetings';\nimport MyForm from \"./MyForm\";\nimport ReducerHooks from \"./ReducerHooks\";\n\nconst App = () => {\n    const onClick = (name: string) => {\n        console.log(`${name} says hello`);\n    };\n\n    const onSubmit = (form: { name: string; description: string }) => {\n        console.log(form)\n    }\n\n    return (\n        <>\n            <Greetings name=\"Donghwi\" onClick={onClick}/>\n            <hr/>\n            <ReducerHooks/>\n            <hr/>\n            <MyForm onSubmit={onSubmit}/>\n            <hr/>\n        </>\n    )\n};\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}